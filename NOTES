NOTES
=====

salt-call --local saltutil.sync_all
salt-call --local state.highstate
salt-call --local --out=yaml state.show_sls python_pip
salt '*' state.highstate -l debug

RESEARCH
--------
- Seems like when I replace /root/.config/Trolltech.conf with copy from /hone/users/.config/Trolltech.conf
  the root graphics start appearing nicely!

- XDG_CURRENT_DESKTOP=gnome retext -style adwaita
  will exporting the XDG_CURRENT_DESKTOP=gnome var help with UI?
- gtk2-engines

- Do I need all those depends in salt/master-minion, etc?  Cause bootstrap takes care of that
- when working on cross platform depends, use pyobjects map over jinga

NEXT
----

- OK... NEW STEPS. (DO AFTER WE GET SALT / PIP WORKING)
  1) All same up to initial bootstrap of salt
  2) Before BS, use custom minion or master conf.  sed the script to include this dir
     for rootfs for initial run... 
  3) After bootstrap, salt will set up all dirs, including the bind-dirs
  4) remove ALL code not required from here
  5) salt can re-clone this package into /srv/salt-formulas
  -) -- OR -- should this end up being a rpm/deb where initial files put in place and postinit script?
     DUNNO about rpm, since this is a one shot install and would never need an update since updates will be
     via git
  -) -- OR -- Again, this package, but gets moved to /srv/salt/salt | salt_bootstrap; but will be missing top
     file, but maybe we can run it directly
  

- Add pip and salt states to initial bootstrap
- Use mine to start, then mixin the pillar formula one
- get halite working; add rootfs to my source directory
- Maybe I should actually place salt + pip in seperate git package and install that 
  so it can be updated; or maybe this one is the package; just rework directories
  hmm, kinda like this being the formula; just happens to contain bootstrap too
- OK... this package will get copied or cloned to /srv/salt
  - then use custom salt/master.d file with salt bootstrap
  - want MINIMUM script here, then use salt to configure itself


- May need to create PKI file
- Need to auth minion to master

- Initially populate srv with a few salt states
- get git mounts working too

ISSUES
------
- minion gitfs does not seem to work well with salt-call
  - search gitfs minion salt-call
    - google groups
      https://github.com/saltstack/salt/issues/6660
      https://github.com/saltstack/salt/issues/17963
  - OK, it will work kinda; see issues above.  Just jinja not able to search cache path
    so we can wait for a fix and just use master/minion for now

- can't seem to locate gitfs in /srv/formulas for inrospection
  Looks like it will never show there; created a soft-link for now; maybe better just to checkout
  modules in that directory instead

GPG
---
- need to be able to sign git commits;
- need to be able to push key for others
- one state will grab stuff from my repo; need to verify tag as well though

NFS
---
- currenty the code in pillar can go into a state file
  - need module
  - need state module too
  - once that working; move back to pillar

SALT-MASTER
-----------
- Once bootstrapped, get salt server to grab git repo to install EVERYTHING else we want
  so we will need to create some type of install state which will include salt server states
  so it can update itself
- during this installation; add packages to top.sls, but commented out

HALITE
------
- maybe create a sls.info / sls.index file for each package that will contain name, description, etc
  - also allow a global file so we can create info for formula that don't support this format yet
- Hmm, any configurations can go into a pillar! (like sw configs); editable in gui
- halite will also be included
- halite can either read top.sls or walk the salt base to be able to provide GUI to enable/disable states

QUBES-RPC
---------
- create a master AppVM that communicates via RPC and have master have no networking by default; except to update

NOTES
-----
- autoaccept is on (localhost only); turn off after initial update

THEMES
------
/usr/share/themes
~/.themes
gtk 3.x themes for windowing

GTK Theme
gsettings set org.gnome.desktop.interface gtk-theme "Orchis"
gsettings set org.gnome.desktop.wm.preferences theme "Orchis"

May also need:
gnome-shell-extension-user-theme

gtk-unico-engine - Fedora
gtk3-engines-unico - Debian

clearlooks-phenix-gtk3-theme
bluebird-gtk3-theme
albatross-gtk3-theme
oxygen-gtk3

.config/fontsconfig/conf.d/hack.conf seems to be a fedora workaround
https://bugzilla.redhat.com/show_bug.cgi?id=1035486
